{
  "version": 3,
  "sources": ["../../../../../node_modules/highlight.js/es/languages/cpp.js"],
  "sourcesContent": ["/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cpp(hljs) {\n  const regex = hljs.regex;\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(?!struct)(' + DECLTYPE_AUTO_RE + '|' + regex.optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE) + ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'type',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + '|.)',\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n    // Floating-point literal.\n    {\n      begin: \"[+-]?(?:\" // Leading sign.\n      // Decimal.\n      + \"(?:\" + \"[0-9](?:'?[0-9])*\\\\.(?:[0-9](?:'?[0-9])*)?\" + \"|\\\\.[0-9](?:'?[0-9])*\" + \")(?:[Ee][+-]?[0-9](?:'?[0-9])*)?\" + \"|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*\"\n      // Hexadecimal.\n      + \"|0[Xx](?:\" + \"[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?\" + \"|\\\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" + \")[Pp][+-]?[0-9](?:'?[0-9])*\" + \")(?:\" // Literal suffixes.\n      + \"[Ff](?:16|32|64|128)?\" + \"|(BF|bf)16\" + \"|[Ll]\" + \"|\" // Literal suffix is optional.\n      + \")\"\n    },\n    // Integer literal.\n    {\n      begin: \"[+-]?\\\\b(?:\" // Leading sign.\n      + \"0[Bb][01](?:'?[01])*\" // Binary.\n      + \"|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" // Hexadecimal.\n      + \"|0(?:'?[0-7])*\" // Octal or just a lone zero.\n      + \"|[1-9](?:'?[0-9])*\" // Decimal.\n      + \")(?:\" // Literal suffixes.\n      + \"[Uu](?:LL?|ll?)\" + \"|[Uu][Zz]?\" + \"|(?:LL?|ll?)[Uu]?\" + \"|[Zz][Uu]\" + \"|\" // Literal suffix is optional.\n      + \")\"\n      // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the\n      // literal highlight actually makes it stand out more.\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword: 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'string'\n    }), {\n      className: 'string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_KEYWORDS = ['alignas', 'alignof', 'and', 'and_eq', 'asm', 'atomic_cancel', 'atomic_commit', 'atomic_noexcept', 'auto', 'bitand', 'bitor', 'break', 'case', 'catch', 'class', 'co_await', 'co_return', 'co_yield', 'compl', 'concept', 'const_cast|10', 'consteval', 'constexpr', 'constinit', 'continue', 'decltype', 'default', 'delete', 'do', 'dynamic_cast|10', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'final', 'for', 'friend', 'goto', 'if', 'import', 'inline', 'module', 'mutable', 'namespace', 'new', 'noexcept', 'not', 'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'override', 'private', 'protected', 'public', 'reflexpr', 'register', 'reinterpret_cast|10', 'requires', 'return', 'sizeof', 'static_assert', 'static_cast|10', 'struct', 'switch', 'synchronized', 'template', 'this', 'thread_local', 'throw', 'transaction_safe', 'transaction_safe_dynamic', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'using', 'virtual', 'volatile', 'while', 'xor', 'xor_eq'];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_TYPES = ['bool', 'char', 'char16_t', 'char32_t', 'char8_t', 'double', 'float', 'int', 'long', 'short', 'void', 'wchar_t', 'unsigned', 'signed', 'const', 'static'];\n  const TYPE_HINTS = ['any', 'auto_ptr', 'barrier', 'binary_semaphore', 'bitset', 'complex', 'condition_variable', 'condition_variable_any', 'counting_semaphore', 'deque', 'false_type', 'future', 'imaginary', 'initializer_list', 'istringstream', 'jthread', 'latch', 'lock_guard', 'multimap', 'multiset', 'mutex', 'optional', 'ostringstream', 'packaged_task', 'pair', 'promise', 'priority_queue', 'queue', 'recursive_mutex', 'recursive_timed_mutex', 'scoped_lock', 'set', 'shared_future', 'shared_lock', 'shared_mutex', 'shared_timed_mutex', 'shared_ptr', 'stack', 'string_view', 'stringstream', 'timed_mutex', 'thread', 'true_type', 'tuple', 'unique_lock', 'unique_ptr', 'unordered_map', 'unordered_multimap', 'unordered_multiset', 'unordered_set', 'variant', 'vector', 'weak_ptr', 'wstring', 'wstring_view'];\n  const FUNCTION_HINTS = ['abort', 'abs', 'acos', 'apply', 'as_const', 'asin', 'atan', 'atan2', 'calloc', 'ceil', 'cerr', 'cin', 'clog', 'cos', 'cosh', 'cout', 'declval', 'endl', 'exchange', 'exit', 'exp', 'fabs', 'floor', 'fmod', 'forward', 'fprintf', 'fputs', 'free', 'frexp', 'fscanf', 'future', 'invoke', 'isalnum', 'isalpha', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'labs', 'launder', 'ldexp', 'log', 'log10', 'make_pair', 'make_shared', 'make_shared_for_overwrite', 'make_tuple', 'make_unique', 'malloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'move', 'pow', 'printf', 'putchar', 'puts', 'realloc', 'scanf', 'sin', 'sinh', 'snprintf', 'sprintf', 'sqrt', 'sscanf', 'std', 'stderr', 'stdin', 'stdout', 'strcat', 'strchr', 'strcmp', 'strcpy', 'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'swap', 'tan', 'tanh', 'terminate', 'to_underlying', 'tolower', 'toupper', 'vfprintf', 'visit', 'vprintf', 'vsprintf'];\n  const LITERALS = ['NULL', 'false', 'nullopt', 'nullptr', 'true'];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const BUILT_IN = ['_Pragma'];\n  const CPP_KEYWORDS = {\n    type: RESERVED_TYPES,\n    keyword: RESERVED_KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_IN,\n    _type_hints: TYPE_HINTS\n  };\n  const FUNCTION_DISPATCH = {\n    className: 'function.dispatch',\n    relevance: 0,\n    keywords: {\n      // Only for relevance, not highlighting.\n      _hint: FUNCTION_HINTS\n    },\n    begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n  };\n  const EXPRESSION_CONTAINS = [FUNCTION_DISPATCH, PREPROCESSOR, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    },\n    // needed because we do not have look-behind on the below rule\n    // to prevent it from grabbing the final : in a :: pair\n    {\n      begin: /::/,\n      relevance: 0\n    },\n    // initializers\n    {\n      begin: /:/,\n      endsWithParent: true,\n      contains: [STRINGS, NUMBERS]\n    },\n    // allow for multiple declarations, e.g.:\n    // extern void f(int), g(char);\n    {\n      relevance: 0,\n      match: /,/\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES,\n      // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: 'C++',\n    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      'function.dispatch': 'built_in'\n    },\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<(?!<)',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      match: [\n      // extra complexity to deal with `enum class` and `enum struct`\n      /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/, /\\s+/, /\\w+/],\n      className: {\n        1: 'keyword',\n        3: 'title.class'\n      }\n    }])\n  };\n}\nexport { cpp as default };"],
  "mappings": "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",
  "names": []
}
