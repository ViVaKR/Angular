{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-highlightjs/fesm2022/ngx-highlightjs-line-numbers.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, ElementRef, effect, numberAttribute, booleanAttribute, Directive, Input } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HIGHLIGHT_OPTIONS, HighlightJS, HighlightBase } from 'ngx-highlightjs';\nfunction activateLineNumbers() {\n  const w = window;\n  const d = document;\n  const TABLE_NAME = 'hljs-ln',\n    LINE_NAME = 'hljs-ln-line',\n    CODE_BLOCK_NAME = 'hljs-ln-code',\n    NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n    NUMBER_LINE_NAME = 'hljs-ln-n',\n    DATA_ATTR_NAME = 'data-line-number',\n    BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n  if (w.hljs) {\n    w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n    w.hljs.lineNumbersBlock = lineNumbersBlock;\n    w.hljs.lineNumbersValue = lineNumbersValue;\n    addStyles();\n  } else {\n    w.console.error('highlight.js not detected!');\n  }\n  function isHljsLnCodeDescendant(domElt) {\n    let curElt = domElt;\n    while (curElt) {\n      if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n        return true;\n      }\n      curElt = curElt.parentNode;\n    }\n    return false;\n  }\n  function getHljsLnTable(hljsLnDomElt) {\n    let curElt = hljsLnDomElt;\n    while (curElt.nodeName !== 'TABLE') {\n      curElt = curElt.parentNode;\n    }\n    return curElt;\n  }\n  // Function to workaround a copy issue with Microsoft Edge.\n  // Due to hljs-ln wrapping the lines of code inside a <table> element,\n  // itself wrapped inside a <pre> element, window.getSelection().toString()\n  // does not contain any line breaks. So we need to get them back using the\n  // rendered code in the DOM as reference.\n  function edgeGetSelectedCodeLines(selection) {\n    // current selected text without line breaks\n    const selectionText = selection.toString();\n    // get the <td> element wrapping the first line of selected code\n    let tdAnchor = selection.anchorNode;\n    while (tdAnchor.nodeName !== 'TD') {\n      tdAnchor = tdAnchor.parentNode;\n    }\n    // get the <td> element wrapping the last line of selected code\n    let tdFocus = selection.focusNode;\n    while (tdFocus.nodeName !== 'TD') {\n      tdFocus = tdFocus.parentNode;\n    }\n    // extract line numbers\n    let firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n    let lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n    // multi-lines copied case\n    if (firstLineNumber != lastLineNumber) {\n      let firstLineText = tdAnchor.textContent;\n      let lastLineText = tdFocus.textContent;\n      // if the selection was made backward, swap values\n      if (firstLineNumber > lastLineNumber) {\n        let tmp = firstLineNumber;\n        firstLineNumber = lastLineNumber;\n        lastLineNumber = tmp;\n        tmp = firstLineText;\n        firstLineText = lastLineText;\n        lastLineText = tmp;\n      }\n      // discard not copied characters in first line\n      while (selectionText.indexOf(firstLineText) !== 0) {\n        firstLineText = firstLineText.slice(1);\n      }\n      // discard not copied characters in last line\n      while (selectionText.lastIndexOf(lastLineText) === -1) {\n        lastLineText = lastLineText.slice(0, -1);\n      }\n      // reconstruct and return the real copied text\n      let selectedText = firstLineText;\n      const hljsLnTable = getHljsLnTable(tdAnchor);\n      for (let i = firstLineNumber + 1; i < lastLineNumber; ++i) {\n        const codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n        const codeLineElt = hljsLnTable.querySelector(codeLineSel);\n        selectedText += '\\n' + codeLineElt.textContent;\n      }\n      selectedText += '\\n' + lastLineText;\n      return selectedText;\n      // single copied line case\n    } else {\n      return selectionText;\n    }\n  }\n  // ensure consistent code copy/paste behavior across all browsers\n  // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n  document.addEventListener('copy', function (e) {\n    // get current selection\n    const selection = window.getSelection();\n    // override behavior when one wants to copy line of codes\n    if (isHljsLnCodeDescendant(selection.anchorNode)) {\n      let selectionText;\n      // workaround an issue with Microsoft Edge as copied line breaks\n      // are removed otherwise from the selection string\n      if (window.navigator.userAgent.indexOf('Edge') !== -1) {\n        selectionText = edgeGetSelectedCodeLines(selection);\n      } else {\n        // other browsers can directly use the selection string\n        selectionText = selection.toString();\n      }\n      e.clipboardData.setData('text/plain', selectionText);\n      e.preventDefault();\n    }\n  });\n  function addStyles() {\n    const css = d.createElement('style');\n    css.type = 'text/css';\n    css.innerHTML = format('.{0}{border-collapse:collapse}' + '.{0} td{padding:0}' + '.{1}:before{content:attr({2})}', [TABLE_NAME, NUMBER_LINE_NAME, DATA_ATTR_NAME]);\n    d.getElementsByTagName('head')[0].appendChild(css);\n  }\n  function initLineNumbersOnLoad(options) {\n    if (d.readyState === 'interactive' || d.readyState === 'complete') {\n      documentReady(options);\n    } else {\n      w.addEventListener('DOMContentLoaded', function () {\n        documentReady(options);\n      });\n    }\n  }\n  function documentReady(options) {\n    try {\n      const blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n      for (const i in blocks) {\n        if (blocks.hasOwnProperty(i)) {\n          if (!isPluginDisabledForBlock(blocks[i])) {\n            lineNumbersBlock(blocks[i], options);\n          }\n        }\n      }\n    } catch (e) {\n      w.console.error('LineNumbers error: ', e);\n    }\n  }\n  function isPluginDisabledForBlock(element) {\n    return element.classList.contains('nohljsln');\n  }\n  function lineNumbersBlock(element, options) {\n    if (typeof element !== 'object') {\n      return;\n    }\n    async(function () {\n      element.innerHTML = lineNumbersInternal(element, options);\n    });\n  }\n  function lineNumbersValue(value, options) {\n    if (typeof value !== 'string') {\n      return;\n    }\n    const element = document.createElement('code');\n    element.innerHTML = value;\n    return lineNumbersInternal(element, options);\n  }\n  function lineNumbersInternal(element, options) {\n    const internalOptions = mapOptions(element, options);\n    duplicateMultilineNodes(element);\n    return addLineNumbersBlockFor(element.innerHTML, internalOptions);\n  }\n  function addLineNumbersBlockFor(inputHtml, options) {\n    const lines = getLines(inputHtml);\n    // if last line contains only carriage return remove it\n    if (lines[lines.length - 1].trim() === '') {\n      lines.pop();\n    }\n    if (lines.length > 1 || options.singleLine) {\n      let html = '';\n      for (let i = 0, l = lines.length; i < l; i++) {\n        html += format('<tr>' + '<td class=\"{0} {1}\" {3}=\"{5}\">' + '<div class=\"{2}\" {3}=\"{5}\"></div>' + '</td>' + '<td class=\"{0} {4}\" {3}=\"{5}\">' + '{6}' + '</td>' + '</tr>', [LINE_NAME, NUMBERS_BLOCK_NAME, NUMBER_LINE_NAME, DATA_ATTR_NAME, CODE_BLOCK_NAME, i + options.startFrom, lines[i].length > 0 ? lines[i] : ' ']);\n      }\n      return format('<table class=\"{0}\">{1}</table>', [TABLE_NAME, html]);\n    }\n    return inputHtml;\n  }\n  /**\n   * @param {HTMLElement} element Code block.\n   * @param {Object} options External API options.\n   * @returns {Object} Internal API options.\n   */\n  function mapOptions(element, options) {\n    options = options || {};\n    return {\n      singleLine: getSingleLineOption(options),\n      startFrom: getStartFromOption(element, options)\n    };\n  }\n  function getSingleLineOption(options) {\n    const defaultValue = false;\n    if (options.singleLine) {\n      return options.singleLine;\n    }\n    return defaultValue;\n  }\n  function getStartFromOption(element, options) {\n    const defaultValue = 1;\n    let startFrom = defaultValue;\n    if (isFinite(options.startFrom)) {\n      startFrom = options.startFrom;\n    }\n    // can be overridden because local option is priority\n    const value = getAttribute(element, 'data-ln-start-from');\n    if (value !== null) {\n      startFrom = toNumber(value, defaultValue);\n    }\n    return startFrom;\n  }\n  /**\n   * Recursive method for fix multi-line elements implementation in highlight.js\n   * Doing deep passage on child nodes.\n   * @param {HTMLElement} element\n   */\n  function duplicateMultilineNodes(element) {\n    const nodes = element.childNodes;\n    for (const node in nodes) {\n      if (nodes.hasOwnProperty(node)) {\n        const child = nodes[node];\n        if (getLinesCount(child.textContent) > 0) {\n          if (child.childNodes.length > 0) {\n            duplicateMultilineNodes(child);\n          } else {\n            duplicateMultilineNode(child.parentNode);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Method for fix multi-line elements implementation in highlight.js\n   * @param {HTMLElement} element\n   */\n  function duplicateMultilineNode(element) {\n    const className = element.className;\n    if (!/hljs-/.test(className)) {\n      return;\n    }\n    const lines = getLines(element.innerHTML);\n    let result = '';\n    for (let i = 0; i < lines.length; i++) {\n      const lineText = lines[i].length > 0 ? lines[i] : ' ';\n      result += format('<span class=\"{0}\">{1}</span>\\n', [className, lineText]);\n    }\n    element.innerHTML = result.trim();\n  }\n  function getLines(text) {\n    if (text.length === 0) {\n      return [];\n    }\n    return text.split(BREAK_LINE_REGEXP);\n  }\n  function getLinesCount(text) {\n    return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n  }\n  ///\n  /// HELPERS\n  ///\n  function async(func) {\n    w.setTimeout(func, 0);\n  }\n  /**\n   * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n   * @param {string} format\n   * @param {array} args\n   */\n  function format(format, args) {\n    return format.replace(/\\{(\\d+)\\}/g, function (m, n) {\n      return args[n] !== undefined ? args[n] : m;\n    });\n  }\n  /**\n   * @param {HTMLElement} element Code block.\n   * @param {String} attrName Attribute name.\n   * @returns {String} Attribute value or empty.\n   */\n  function getAttribute(element, attrName) {\n    return element.hasAttribute(attrName) ? element.getAttribute(attrName) : null;\n  }\n  /**\n   * @param {String} str Source string.\n   * @param {Number} fallback Fallback value.\n   * @returns Parsed number or fallback value.\n   */\n  function toNumber(str, fallback) {\n    if (!str) {\n      return fallback;\n    }\n    const number = Number(str);\n    return isFinite(number) ? number : fallback;\n  }\n}\nclass HighlightLineNumbers {\n  constructor() {\n    this._platform = inject(PLATFORM_ID);\n    this.options = inject(HIGHLIGHT_OPTIONS)?.lineNumbersOptions;\n    this._hljs = inject(HighlightJS);\n    this._highlight = inject(HighlightBase);\n    this._nativeElement = inject(ElementRef).nativeElement;\n    this.startFrom = this.options?.startFrom;\n    this.singleLine = this.options?.singleLine;\n    if (isPlatformBrowser(this._platform)) {\n      effect(() => {\n        if (this._highlight.highlightResult()) {\n          this.addLineNumbers();\n        }\n      });\n    }\n  }\n  addLineNumbers() {\n    // Clean up line numbers observer\n    this.destroyLineNumbersObserver();\n    requestAnimationFrame(async () => {\n      // Add line numbers\n      await this._hljs.lineNumbersBlock(this._nativeElement, {\n        startFrom: this.startFrom,\n        singleLine: this.singleLine\n      });\n      // If lines count is 1, the line numbers library will not add numbers\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n      this._lineNumbersObs = new MutationObserver(() => {\n        if (this._nativeElement.firstElementChild?.tagName.toUpperCase() === 'TABLE') {\n          this._nativeElement.classList.add('hljs-line-numbers');\n        }\n        this.destroyLineNumbersObserver();\n      });\n      this._lineNumbersObs.observe(this._nativeElement, {\n        childList: true\n      });\n    });\n  }\n  destroyLineNumbersObserver() {\n    if (this._lineNumbersObs) {\n      this._lineNumbersObs.disconnect();\n      this._lineNumbersObs = null;\n    }\n  }\n  static {\n    this.ɵfac = function HighlightLineNumbers_Factory(t) {\n      return new (t || HighlightLineNumbers)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: HighlightLineNumbers,\n      selectors: [[\"\", \"highlight\", \"\", \"lineNumbers\", \"\"], [\"\", \"highlightAuto\", \"\", \"lineNumbers\", \"\"]],\n      inputs: {\n        startFrom: [2, \"startFrom\", \"startFrom\", numberAttribute],\n        singleLine: [2, \"singleLine\", \"singleLine\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HighlightLineNumbers, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[highlight][lineNumbers], [highlightAuto][lineNumbers]'\n    }]\n  }], () => [], {\n    startFrom: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    singleLine: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HighlightLineNumbers, activateLineNumbers };\n"],
  "mappings": "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",
  "names": ["format"]
}
