{
  "version": 3,
  "sources": ["../../../../../node_modules/highlight.js/es/languages/c.js"],
  "sourcesContent": ["/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  const regex = hljs.regex;\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + regex.optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE) + ')';\n  const TYPES = {\n    className: 'type',\n    variants: [{\n      begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n    }, {\n      match: /\\batomic_[a-z]{3,6}\\b/\n    }]\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword: 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef elifdef elifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'string'\n    }), {\n      className: 'string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  const C_KEYWORDS = [\"asm\", \"auto\", \"break\", \"case\", \"continue\", \"default\", \"do\", \"else\", \"enum\", \"extern\", \"for\", \"fortran\", \"goto\", \"if\", \"inline\", \"register\", \"restrict\", \"return\", \"sizeof\", \"typeof\", \"typeof_unqual\", \"struct\", \"switch\", \"typedef\", \"union\", \"volatile\", \"while\", \"_Alignas\", \"_Alignof\", \"_Atomic\", \"_Generic\", \"_Noreturn\", \"_Static_assert\", \"_Thread_local\",\n  // aliases\n  \"alignas\", \"alignof\", \"noreturn\", \"static_assert\", \"thread_local\",\n  // not a C keyword but is, for all intents and purposes, treated exactly like one.\n  \"_Pragma\"];\n  const C_TYPES = [\"float\", \"double\", \"signed\", \"unsigned\", \"int\", \"short\", \"long\", \"char\", \"void\", \"_Bool\", \"_BitInt\", \"_Complex\", \"_Imaginary\", \"_Decimal32\", \"_Decimal64\", \"_Decimal96\", \"_Decimal128\", \"_Decimal64x\", \"_Decimal128x\", \"_Float16\", \"_Float32\", \"_Float64\", \"_Float128\", \"_Float32x\", \"_Float64x\", \"_Float128x\",\n  // modifiers\n  \"const\", \"static\", \"constexpr\",\n  // aliases\n  \"complex\", \"bool\", \"imaginary\"];\n  const KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr'\n  };\n  const EXPRESSION_CONTAINS = [PREPROCESSOR, TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  const FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [hljs.inherit(TITLE_MODE, {\n        className: \"title.function\"\n      })],\n      relevance: 0\n    },\n    // allow for multiple declarations, e.g.:\n    // extern void f(int), g(char);\n    {\n      relevance: 0,\n      match: /,/\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, TYPES,\n      // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, TYPES]\n      }]\n    }, TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: \"C\",\n    aliases: ['h'],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'enum class struct union',\n      end: /[{;:<>=]/,\n      contains: [{\n        beginKeywords: \"final class struct\"\n      }, hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\nexport { c as default };"],
  "mappings": "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",
  "names": []
}
