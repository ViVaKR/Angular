{
  "version": 3,
  "sources": ["../../../../../node_modules/highlight.js/es/languages/markdown.js"],
  "sourcesContent": ["/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n    // TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    },\n    // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n    // too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    },\n    // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    },\n    // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    },\n    // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.*?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      // empty strings for alt or link text\n      match: /\\[(?=\\])/\n    }, {\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}(?!\\s)/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}(?!\\s)/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?![*\\s])/,\n      end: /\\*/\n    }, {\n      begin: /_(?![_\\s])/,\n      end: /_/,\n      relevance: 0\n    }]\n  };\n\n  // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, {\n    contains: []\n  });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, {\n    contains: []\n  });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  [BOLD, ITALIC, BOLD_WITHOUT_ITALIC, ITALIC_WITHOUT_BOLD].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  const ENTITY = {\n    //https://spec.commonmark.org/0.31.2/#entity-references\n    scope: 'literal',\n    match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE, ENTITY]\n  };\n}\nexport { markdown as default };"],
  "mappings": "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",
  "names": []
}
