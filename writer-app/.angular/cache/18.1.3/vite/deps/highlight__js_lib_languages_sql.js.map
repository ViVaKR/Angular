{
  "version": 3,
  "sources": ["../../../../../node_modules/highlight.js/es/languages/sql.js"],
  "sourcesContent": ["/*\n Language: SQL\n Website: https://en.wikipedia.org/wiki/SQL\n Category: common, database\n */\n\n/*\n\nGoals:\n\nSQL is intended to highlight basic/common SQL keywords and expressions\n\n- If pretty much every single SQL server includes supports, then it's a canidate.\n- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,\n  PostgreSQL) although the list of data types is purposely a bit more expansive.\n- For more specific SQL grammars please see:\n  - PostgreSQL and PL/pgSQL - core\n  - T-SQL - https://github.com/highlightjs/highlightjs-tsql\n  - sql_more (core)\n\n */\n\nfunction sql(hljs) {\n  const regex = hljs.regex;\n  const COMMENT_MODE = hljs.COMMENT('--', '$');\n  const STRING = {\n    className: 'string',\n    variants: [{\n      begin: /'/,\n      end: /'/,\n      contains: [{\n        begin: /''/\n      }]\n    }]\n  };\n  const QUOTED_IDENTIFIER = {\n    begin: /\"/,\n    end: /\"/,\n    contains: [{\n      begin: /\"\"/\n    }]\n  };\n  const LITERALS = [\"true\", \"false\",\n  // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.\n  // \"null\",\n  \"unknown\"];\n  const MULTI_WORD_TYPES = [\"double precision\", \"large object\", \"with timezone\", \"without timezone\"];\n  const TYPES = ['bigint', 'binary', 'blob', 'boolean', 'char', 'character', 'clob', 'date', 'dec', 'decfloat', 'decimal', 'float', 'int', 'integer', 'interval', 'nchar', 'nclob', 'national', 'numeric', 'real', 'row', 'smallint', 'time', 'timestamp', 'varchar', 'varying',\n  // modifier (character varying)\n  'varbinary'];\n  const NON_RESERVED_WORDS = [\"add\", \"asc\", \"collation\", \"desc\", \"final\", \"first\", \"last\", \"view\"];\n\n  // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word\n  const RESERVED_WORDS = [\"abs\", \"acos\", \"all\", \"allocate\", \"alter\", \"and\", \"any\", \"are\", \"array\", \"array_agg\", \"array_max_cardinality\", \"as\", \"asensitive\", \"asin\", \"asymmetric\", \"at\", \"atan\", \"atomic\", \"authorization\", \"avg\", \"begin\", \"begin_frame\", \"begin_partition\", \"between\", \"bigint\", \"binary\", \"blob\", \"boolean\", \"both\", \"by\", \"call\", \"called\", \"cardinality\", \"cascaded\", \"case\", \"cast\", \"ceil\", \"ceiling\", \"char\", \"char_length\", \"character\", \"character_length\", \"check\", \"classifier\", \"clob\", \"close\", \"coalesce\", \"collate\", \"collect\", \"column\", \"commit\", \"condition\", \"connect\", \"constraint\", \"contains\", \"convert\", \"copy\", \"corr\", \"corresponding\", \"cos\", \"cosh\", \"count\", \"covar_pop\", \"covar_samp\", \"create\", \"cross\", \"cube\", \"cume_dist\", \"current\", \"current_catalog\", \"current_date\", \"current_default_transform_group\", \"current_path\", \"current_role\", \"current_row\", \"current_schema\", \"current_time\", \"current_timestamp\", \"current_path\", \"current_role\", \"current_transform_group_for_type\", \"current_user\", \"cursor\", \"cycle\", \"date\", \"day\", \"deallocate\", \"dec\", \"decimal\", \"decfloat\", \"declare\", \"default\", \"define\", \"delete\", \"dense_rank\", \"deref\", \"describe\", \"deterministic\", \"disconnect\", \"distinct\", \"double\", \"drop\", \"dynamic\", \"each\", \"element\", \"else\", \"empty\", \"end\", \"end_frame\", \"end_partition\", \"end-exec\", \"equals\", \"escape\", \"every\", \"except\", \"exec\", \"execute\", \"exists\", \"exp\", \"external\", \"extract\", \"false\", \"fetch\", \"filter\", \"first_value\", \"float\", \"floor\", \"for\", \"foreign\", \"frame_row\", \"free\", \"from\", \"full\", \"function\", \"fusion\", \"get\", \"global\", \"grant\", \"group\", \"grouping\", \"groups\", \"having\", \"hold\", \"hour\", \"identity\", \"in\", \"indicator\", \"initial\", \"inner\", \"inout\", \"insensitive\", \"insert\", \"int\", \"integer\", \"intersect\", \"intersection\", \"interval\", \"into\", \"is\", \"join\", \"json_array\", \"json_arrayagg\", \"json_exists\", \"json_object\", \"json_objectagg\", \"json_query\", \"json_table\", \"json_table_primitive\", \"json_value\", \"lag\", \"language\", \"large\", \"last_value\", \"lateral\", \"lead\", \"leading\", \"left\", \"like\", \"like_regex\", \"listagg\", \"ln\", \"local\", \"localtime\", \"localtimestamp\", \"log\", \"log10\", \"lower\", \"match\", \"match_number\", \"match_recognize\", \"matches\", \"max\", \"member\", \"merge\", \"method\", \"min\", \"minute\", \"mod\", \"modifies\", \"module\", \"month\", \"multiset\", \"national\", \"natural\", \"nchar\", \"nclob\", \"new\", \"no\", \"none\", \"normalize\", \"not\", \"nth_value\", \"ntile\", \"null\", \"nullif\", \"numeric\", \"octet_length\", \"occurrences_regex\", \"of\", \"offset\", \"old\", \"omit\", \"on\", \"one\", \"only\", \"open\", \"or\", \"order\", \"out\", \"outer\", \"over\", \"overlaps\", \"overlay\", \"parameter\", \"partition\", \"pattern\", \"per\", \"percent\", \"percent_rank\", \"percentile_cont\", \"percentile_disc\", \"period\", \"portion\", \"position\", \"position_regex\", \"power\", \"precedes\", \"precision\", \"prepare\", \"primary\", \"procedure\", \"ptf\", \"range\", \"rank\", \"reads\", \"real\", \"recursive\", \"ref\", \"references\", \"referencing\", \"regr_avgx\", \"regr_avgy\", \"regr_count\", \"regr_intercept\", \"regr_r2\", \"regr_slope\", \"regr_sxx\", \"regr_sxy\", \"regr_syy\", \"release\", \"result\", \"return\", \"returns\", \"revoke\", \"right\", \"rollback\", \"rollup\", \"row\", \"row_number\", \"rows\", \"running\", \"savepoint\", \"scope\", \"scroll\", \"search\", \"second\", \"seek\", \"select\", \"sensitive\", \"session_user\", \"set\", \"show\", \"similar\", \"sin\", \"sinh\", \"skip\", \"smallint\", \"some\", \"specific\", \"specifictype\", \"sql\", \"sqlexception\", \"sqlstate\", \"sqlwarning\", \"sqrt\", \"start\", \"static\", \"stddev_pop\", \"stddev_samp\", \"submultiset\", \"subset\", \"substring\", \"substring_regex\", \"succeeds\", \"sum\", \"symmetric\", \"system\", \"system_time\", \"system_user\", \"table\", \"tablesample\", \"tan\", \"tanh\", \"then\", \"time\", \"timestamp\", \"timezone_hour\", \"timezone_minute\", \"to\", \"trailing\", \"translate\", \"translate_regex\", \"translation\", \"treat\", \"trigger\", \"trim\", \"trim_array\", \"true\", \"truncate\", \"uescape\", \"union\", \"unique\", \"unknown\", \"unnest\", \"update\", \"upper\", \"user\", \"using\", \"value\", \"values\", \"value_of\", \"var_pop\", \"var_samp\", \"varbinary\", \"varchar\", \"varying\", \"versioning\", \"when\", \"whenever\", \"where\", \"width_bucket\", \"window\", \"with\", \"within\", \"without\", \"year\"];\n\n  // these are reserved words we have identified to be functions\n  // and should only be highlighted in a dispatch-like context\n  // ie, array_agg(...), etc.\n  const RESERVED_FUNCTIONS = [\"abs\", \"acos\", \"array_agg\", \"asin\", \"atan\", \"avg\", \"cast\", \"ceil\", \"ceiling\", \"coalesce\", \"corr\", \"cos\", \"cosh\", \"count\", \"covar_pop\", \"covar_samp\", \"cume_dist\", \"dense_rank\", \"deref\", \"element\", \"exp\", \"extract\", \"first_value\", \"floor\", \"json_array\", \"json_arrayagg\", \"json_exists\", \"json_object\", \"json_objectagg\", \"json_query\", \"json_table\", \"json_table_primitive\", \"json_value\", \"lag\", \"last_value\", \"lead\", \"listagg\", \"ln\", \"log\", \"log10\", \"lower\", \"max\", \"min\", \"mod\", \"nth_value\", \"ntile\", \"nullif\", \"percent_rank\", \"percentile_cont\", \"percentile_disc\", \"position\", \"position_regex\", \"power\", \"rank\", \"regr_avgx\", \"regr_avgy\", \"regr_count\", \"regr_intercept\", \"regr_r2\", \"regr_slope\", \"regr_sxx\", \"regr_sxy\", \"regr_syy\", \"row_number\", \"sin\", \"sinh\", \"sqrt\", \"stddev_pop\", \"stddev_samp\", \"substring\", \"substring_regex\", \"sum\", \"tan\", \"tanh\", \"translate\", \"translate_regex\", \"treat\", \"trim\", \"trim_array\", \"unnest\", \"upper\", \"value_of\", \"var_pop\", \"var_samp\", \"width_bucket\"];\n\n  // these functions can\n  const POSSIBLE_WITHOUT_PARENS = [\"current_catalog\", \"current_date\", \"current_default_transform_group\", \"current_path\", \"current_role\", \"current_schema\", \"current_transform_group_for_type\", \"current_user\", \"session_user\", \"system_time\", \"system_user\", \"current_time\", \"localtime\", \"current_timestamp\", \"localtimestamp\"];\n\n  // those exist to boost relevance making these very\n  // \"SQL like\" keyword combos worth +1 extra relevance\n  const COMBOS = [\"create table\", \"insert into\", \"primary key\", \"foreign key\", \"not null\", \"alter table\", \"add constraint\", \"grouping sets\", \"on overflow\", \"character set\", \"respect nulls\", \"ignore nulls\", \"nulls first\", \"nulls last\", \"depth first\", \"breadth first\"];\n  const FUNCTIONS = RESERVED_FUNCTIONS;\n  const KEYWORDS = [...RESERVED_WORDS, ...NON_RESERVED_WORDS].filter(keyword => {\n    return !RESERVED_FUNCTIONS.includes(keyword);\n  });\n  const VARIABLE = {\n    className: \"variable\",\n    begin: /@[a-z0-9][a-z0-9_]*/\n  };\n  const OPERATOR = {\n    className: \"operator\",\n    begin: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,\n    relevance: 0\n  };\n  const FUNCTION_CALL = {\n    begin: regex.concat(/\\b/, regex.either(...FUNCTIONS), /\\s*\\(/),\n    relevance: 0,\n    keywords: {\n      built_in: FUNCTIONS\n    }\n  };\n\n  // keywords with less than 3 letters are reduced in relevancy\n  function reduceRelevancy(list, {\n    exceptions,\n    when\n  } = {}) {\n    const qualifyFn = when;\n    exceptions = exceptions || [];\n    return list.map(item => {\n      if (item.match(/\\|\\d+$/) || exceptions.includes(item)) {\n        return item;\n      } else if (qualifyFn(item)) {\n        return `${item}|0`;\n      } else {\n        return item;\n      }\n    });\n  }\n  return {\n    name: 'SQL',\n    case_insensitive: true,\n    // does not include {} or HTML tags `</`\n    illegal: /[{}]|<\\//,\n    keywords: {\n      $pattern: /\\b[\\w\\.]+/,\n      keyword: reduceRelevancy(KEYWORDS, {\n        when: x => x.length < 3\n      }),\n      literal: LITERALS,\n      type: TYPES,\n      built_in: POSSIBLE_WITHOUT_PARENS\n    },\n    contains: [{\n      begin: regex.either(...COMBOS),\n      relevance: 0,\n      keywords: {\n        $pattern: /[\\w\\.]+/,\n        keyword: KEYWORDS.concat(COMBOS),\n        literal: LITERALS,\n        type: TYPES\n      }\n    }, {\n      className: \"type\",\n      begin: regex.either(...MULTI_WORD_TYPES)\n    }, FUNCTION_CALL, VARIABLE, STRING, QUOTED_IDENTIFIER, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE, COMMENT_MODE, OPERATOR]\n  };\n}\nexport { sql as default };"],
  "mappings": "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",
  "names": []
}
